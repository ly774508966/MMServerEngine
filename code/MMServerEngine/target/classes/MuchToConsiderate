// gm的模块化
// 每日变更变量，清零，随机变化，或定时变更
// 要考虑前端的各种请求,合理抛出异常
// 由于要把所有的service添加start和stop,这样,把各种manager也变成service也好
// 程序运行的时候修改文件自动加载
// 网络出现问题的包的处理
// 查看所有抛出的异常有没有正确处理
// asyncDBServer与mainServer相同
// 日志
// 除了ServiceHelper,ClassHelper,BeanHelper,EntityHelper，等以外，其它的Manager等都可以变成非静态的，都做成Service，然后调用start方法
// Sys-Service：EventService,JobService,NetEventService,UpdateService,DataService,SessionService,AsyncService,LockerService,TxCacheService,MonitorService,CacheService
// code添加压缩
// 过滤系统；敏感字
// 权限系统
// 策划配数，系统参数，独立参数（系统负责维护，存储，更新等）
// 场景系统
// 加密：
// 社交
// 支付
// Ioc????
// DBEntity的定义是否可以有多余的字段
// app的包放在配置文件中，现在在ClassHelper
// 场景系统
// 事务提交异步服务器还没有做统一提交
// 版本控制
// 初始的时候,所有的在一个服务器上的服务在mainServer上运行,但是每个服务器加一个负载功能,当mainServer达到一定负载的时候,转给其它服务器
// 这些功能包括:加载的持久化的job,单服务器运行的update,
// 但服务器中运行的东西:id服务,locker服务,异步服务,可能的场景服务(这个貌似要功能逻辑自己做),singleService
// 断线重连如何处理？如切入后台再切回来
// 在init方法中调用其它未初始化的service的时候，如何依赖初始化,注意死循环?
// 心跳